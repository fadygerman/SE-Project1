/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as MybookingsIndexImport } from './routes/mybookings/index'
import { Route as CarsIndexImport } from './routes/cars/index'
import { Route as MybookingsBookingIdIndexImport } from './routes/mybookings/$bookingId/index'
import { Route as CarsCarIdIndexImport } from './routes/cars/$carId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MybookingsIndexRoute = MybookingsIndexImport.update({
  id: '/mybookings/',
  path: '/mybookings/',
  getParentRoute: () => rootRoute,
} as any)

const CarsIndexRoute = CarsIndexImport.update({
  id: '/cars/',
  path: '/cars/',
  getParentRoute: () => rootRoute,
} as any)

const MybookingsBookingIdIndexRoute = MybookingsBookingIdIndexImport.update({
  id: '/mybookings/$bookingId/',
  path: '/mybookings/$bookingId/',
  getParentRoute: () => rootRoute,
} as any)

const CarsCarIdIndexRoute = CarsCarIdIndexImport.update({
  id: '/cars/$carId/',
  path: '/cars/$carId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cars/': {
      id: '/cars/'
      path: '/cars'
      fullPath: '/cars'
      preLoaderRoute: typeof CarsIndexImport
      parentRoute: typeof rootRoute
    }
    '/mybookings/': {
      id: '/mybookings/'
      path: '/mybookings'
      fullPath: '/mybookings'
      preLoaderRoute: typeof MybookingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/cars/$carId/': {
      id: '/cars/$carId/'
      path: '/cars/$carId'
      fullPath: '/cars/$carId'
      preLoaderRoute: typeof CarsCarIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/mybookings/$bookingId/': {
      id: '/mybookings/$bookingId/'
      path: '/mybookings/$bookingId'
      fullPath: '/mybookings/$bookingId'
      preLoaderRoute: typeof MybookingsBookingIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cars': typeof CarsIndexRoute
  '/mybookings': typeof MybookingsIndexRoute
  '/cars/$carId': typeof CarsCarIdIndexRoute
  '/mybookings/$bookingId': typeof MybookingsBookingIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cars': typeof CarsIndexRoute
  '/mybookings': typeof MybookingsIndexRoute
  '/cars/$carId': typeof CarsCarIdIndexRoute
  '/mybookings/$bookingId': typeof MybookingsBookingIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cars/': typeof CarsIndexRoute
  '/mybookings/': typeof MybookingsIndexRoute
  '/cars/$carId/': typeof CarsCarIdIndexRoute
  '/mybookings/$bookingId/': typeof MybookingsBookingIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cars'
    | '/mybookings'
    | '/cars/$carId'
    | '/mybookings/$bookingId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cars' | '/mybookings' | '/cars/$carId' | '/mybookings/$bookingId'
  id:
    | '__root__'
    | '/'
    | '/cars/'
    | '/mybookings/'
    | '/cars/$carId/'
    | '/mybookings/$bookingId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CarsIndexRoute: typeof CarsIndexRoute
  MybookingsIndexRoute: typeof MybookingsIndexRoute
  CarsCarIdIndexRoute: typeof CarsCarIdIndexRoute
  MybookingsBookingIdIndexRoute: typeof MybookingsBookingIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CarsIndexRoute: CarsIndexRoute,
  MybookingsIndexRoute: MybookingsIndexRoute,
  CarsCarIdIndexRoute: CarsCarIdIndexRoute,
  MybookingsBookingIdIndexRoute: MybookingsBookingIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cars/",
        "/mybookings/",
        "/cars/$carId/",
        "/mybookings/$bookingId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cars/": {
      "filePath": "cars/index.tsx"
    },
    "/mybookings/": {
      "filePath": "mybookings/index.tsx"
    },
    "/cars/$carId/": {
      "filePath": "cars/$carId/index.tsx"
    },
    "/mybookings/$bookingId/": {
      "filePath": "mybookings/$bookingId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
