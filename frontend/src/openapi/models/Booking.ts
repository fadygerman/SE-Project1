/* tslint:disable */
/* eslint-disable */
/**
 * Car Rental API
 * Backend API for Car Rental Application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Car } from './Car';
import {
    CarFromJSON,
    CarFromJSONTyped,
    CarToJSON,
    CarToJSONTyped,
} from './Car';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { BookingStatus } from './BookingStatus';
import {
    BookingStatusFromJSON,
    BookingStatusFromJSONTyped,
    BookingStatusToJSON,
    BookingStatusToJSONTyped,
} from './BookingStatus';

/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    id: number;
    /**
     * ID of the user making the booking
     * @type {number}
     * @memberof Booking
     */
    userId: number;
    /**
     * ID of the car being booked
     * @type {number}
     * @memberof Booking
     */
    carId: number;
    /**
     * Start date of the booking period
     * @type {Date}
     * @memberof Booking
     */
    startDate: Date;
    /**
     * End date of the booking period
     * @type {Date}
     * @memberof Booking
     */
    endDate: Date;
    /**
     * Time when the car will be picked up on start_date (UTC time)
     * @type {string}
     * @memberof Booking
     */
    plannedPickupTime: string;
    /**
     * 
     * @type {Date}
     * @memberof Booking
     */
    pickupDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Booking
     */
    returnDate?: Date | null;
    /**
     * Total cost of the booking
     * @type {string}
     * @memberof Booking
     */
    totalCost: string;
    /**
     * Currency code of the booking
     * @type {Currency}
     * @memberof Booking
     */
    currencyCode: Currency;
    /**
     * Exchange rate of the booking
     * @type {string}
     * @memberof Booking
     */
    exchangeRate: string;
    /**
     * Current status of the booking
     * @type {BookingStatus}
     * @memberof Booking
     */
    status: BookingStatus;
    /**
     * 
     * @type {User}
     * @memberof Booking
     */
    user?: User | null;
    /**
     * 
     * @type {Car}
     * @memberof Booking
     */
    car?: Car | null;
}



/**
 * Check if a given object implements the Booking interface.
 */
export function instanceOfBooking(value: object): value is Booking {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('carId' in value) || value['carId'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('endDate' in value) || value['endDate'] === undefined) return false;
    if (!('plannedPickupTime' in value) || value['plannedPickupTime'] === undefined) return false;
    if (!('totalCost' in value) || value['totalCost'] === undefined) return false;
    if (!('currencyCode' in value) || value['currencyCode'] === undefined) return false;
    if (!('exchangeRate' in value) || value['exchangeRate'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function BookingFromJSON(json: any): Booking {
    return BookingFromJSONTyped(json, false);
}

export function BookingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Booking {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['user_id'],
        'carId': json['car_id'],
        'startDate': (new Date(json['start_date'])),
        'endDate': (new Date(json['end_date'])),
        'plannedPickupTime': json['planned_pickup_time'],
        'pickupDate': json['pickup_date'] == null ? undefined : (new Date(json['pickup_date'])),
        'returnDate': json['return_date'] == null ? undefined : (new Date(json['return_date'])),
        'totalCost': json['total_cost'],
        'currencyCode': CurrencyFromJSON(json['currency_code']),
        'exchangeRate': json['exchange_rate'],
        'status': BookingStatusFromJSON(json['status']),
        'user': json['user'] == null ? undefined : UserFromJSON(json['user']),
        'car': json['car'] == null ? undefined : CarFromJSON(json['car']),
    };
}

export function BookingToJSON(json: any): Booking {
    return BookingToJSONTyped(json, false);
}

export function BookingToJSONTyped(value?: Booking | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'user_id': value['userId'],
        'car_id': value['carId'],
        'start_date': ((value['startDate']).toISOString().substring(0,10)),
        'end_date': ((value['endDate']).toISOString().substring(0,10)),
        'planned_pickup_time': value['plannedPickupTime'],
        'pickup_date': value['pickupDate'] == null ? undefined : ((value['pickupDate'] as any).toISOString().substring(0,10)),
        'return_date': value['returnDate'] == null ? undefined : ((value['returnDate'] as any).toISOString().substring(0,10)),
        'total_cost': value['totalCost'],
        'currency_code': CurrencyToJSON(value['currencyCode']),
        'exchange_rate': value['exchangeRate'],
        'status': BookingStatusToJSON(value['status']),
        'user': UserToJSON(value['user']),
        'car': CarToJSON(value['car']),
    };
}

