/* tslint:disable */
/* eslint-disable */
/**
 * Car Rental API
 * Backend API for Car Rental Application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Car,
  HTTPValidationError,
  PaginatedResponseCar,
} from '../models/index';
import {
    CarFromJSON,
    CarToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PaginatedResponseCarFromJSON,
    PaginatedResponseCarToJSON,
} from '../models/index';

export interface GetCarApiV1CarsCarIdGetRequest {
    carId: number;
    currency_code?: string;
}

export interface GetCarsApiV1CarsGetRequest {
    page?: number;
    pageSize?: number;
    name?: string | null;
    availableOnly?: boolean;
    sortBy?: string;
    sortOrder?: string;
    currency_code?: string;
}

/**
 * CarsApi - interface
 * 
 * @export
 * @interface CarsApiInterface
 */
export interface CarsApiInterface {
    /**
     * 
     * @summary Get Car
     * @param {number} carId 
     * @param {'USD' | 'JPY' | 'BGN' | 'CZK' | 'DKK' | 'GBP' | 'HUF' | 'PLN' | 'RON' | 'SEK' | 'CHF' | 'ISK' | 'NOK' | 'TRY' | 'AUD' | 'BRL' | 'CAD' | 'CNY' | 'HKD' | 'IDR' | 'ILS' | 'INR' | 'KRW' | 'MXN' | 'MYR' | 'NZD' | 'PHP' | 'SGD' | 'THB' | 'ZAR' | 'EUR'} [currencyCode] Currency code to convert price to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApiInterface
     */
    getCarApiV1CarsCarIdGetRaw(requestParameters: GetCarApiV1CarsCarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Car>>;

    /**
     * Get Car
     */
    getCarApiV1CarsCarIdGet(requestParameters: GetCarApiV1CarsCarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Car>;

    /**
     * Get all cars with filtering, sorting and pagination.
     * @summary Get Cars
     * @param {number} [page] Page number
     * @param {number} [pageSize] Number of items per page
     * @param {string} [name] Filter by car name or model
     * @param {boolean} [availableOnly] Show only available cars
     * @param {string} [sortBy] Field to sort by
     * @param {string} [sortOrder] Sort order (asc or desc)
     * @param {'USD' | 'JPY' | 'BGN' | 'CZK' | 'DKK' | 'GBP' | 'HUF' | 'PLN' | 'RON' | 'SEK' | 'CHF' | 'ISK' | 'NOK' | 'TRY' | 'AUD' | 'BRL' | 'CAD' | 'CNY' | 'HKD' | 'IDR' | 'ILS' | 'INR' | 'KRW' | 'MXN' | 'MYR' | 'NZD' | 'PHP' | 'SGD' | 'THB' | 'ZAR' | 'EUR'} [currencyCode] Currency code to convert prices to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApiInterface
     */
    getCarsApiV1CarsGetRaw(requestParameters: GetCarsApiV1CarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseCar>>;

    /**
     * Get all cars with filtering, sorting and pagination.
     * Get Cars
     */
    getCarsApiV1CarsGet(requestParameters: GetCarsApiV1CarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseCar>;

}

/**
 * 
 */
export class CarsApi extends runtime.BaseAPI implements CarsApiInterface {

    /**
     * Get Car
     */
    async getCarApiV1CarsCarIdGetRaw(requestParameters: GetCarApiV1CarsCarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Car>> {
        if (requestParameters['carId'] == null) {
            throw new runtime.RequiredError(
                'carId',
                'Required parameter "carId" was null or undefined when calling getCarApiV1CarsCarIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['currency_code'] != null) {
            queryParameters['currency_code'] = requestParameters['currency_code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/cars/{car_id}`.replace(`{${"car_id"}}`, encodeURIComponent(String(requestParameters['carId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarFromJSON(jsonValue));
    }

    /**
     * Get Car
     */
    async getCarApiV1CarsCarIdGet(requestParameters: GetCarApiV1CarsCarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Car> {
        const response = await this.getCarApiV1CarsCarIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all cars with filtering, sorting and pagination.
     * Get Cars
     */
    async getCarsApiV1CarsGetRaw(requestParameters: GetCarsApiV1CarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseCar>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['availableOnly'] != null) {
            queryParameters['available_only'] = requestParameters['availableOnly'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sort_order'] = requestParameters['sortOrder'];
        }

        if (requestParameters['currency_code'] != null) {
            queryParameters['currency_code'] = requestParameters['currency_code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/cars/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseCarFromJSON(jsonValue));
    }

    /**
     * Get all cars with filtering, sorting and pagination.
     * Get Cars
     */
    async getCarsApiV1CarsGet(requestParameters: GetCarsApiV1CarsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseCar> {
        const response = await this.getCarsApiV1CarsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCarApiV1CarsCarIdGetCurrencyCodeEnum = {
    Usd: 'USD',
    Jpy: 'JPY',
    Bgn: 'BGN',
    Czk: 'CZK',
    Dkk: 'DKK',
    Gbp: 'GBP',
    Huf: 'HUF',
    Pln: 'PLN',
    Ron: 'RON',
    Sek: 'SEK',
    Chf: 'CHF',
    Isk: 'ISK',
    Nok: 'NOK',
    Try: 'TRY',
    Aud: 'AUD',
    Brl: 'BRL',
    Cad: 'CAD',
    Cny: 'CNY',
    Hkd: 'HKD',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Krw: 'KRW',
    Mxn: 'MXN',
    Myr: 'MYR',
    Nzd: 'NZD',
    Php: 'PHP',
    Sgd: 'SGD',
    Thb: 'THB',
    Zar: 'ZAR',
    Eur: 'EUR'
} as const;
export type GetCarApiV1CarsCarIdGetCurrencyCodeEnum = typeof GetCarApiV1CarsCarIdGetCurrencyCodeEnum[keyof typeof GetCarApiV1CarsCarIdGetCurrencyCodeEnum];
/**
 * @export
 */
export const GetCarsApiV1CarsGetCurrencyCodeEnum = {
    Usd: 'USD',
    Jpy: 'JPY',
    Bgn: 'BGN',
    Czk: 'CZK',
    Dkk: 'DKK',
    Gbp: 'GBP',
    Huf: 'HUF',
    Pln: 'PLN',
    Ron: 'RON',
    Sek: 'SEK',
    Chf: 'CHF',
    Isk: 'ISK',
    Nok: 'NOK',
    Try: 'TRY',
    Aud: 'AUD',
    Brl: 'BRL',
    Cad: 'CAD',
    Cny: 'CNY',
    Hkd: 'HKD',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Krw: 'KRW',
    Mxn: 'MXN',
    Myr: 'MYR',
    Nzd: 'NZD',
    Php: 'PHP',
    Sgd: 'SGD',
    Thb: 'THB',
    Zar: 'ZAR',
    Eur: 'EUR'
} as const;
export type GetCarsApiV1CarsGetCurrencyCodeEnum = typeof GetCarsApiV1CarsGetCurrencyCodeEnum[keyof typeof GetCarsApiV1CarsGetCurrencyCodeEnum];
