/* tslint:disable */
/* eslint-disable */
/**
 * Car Rental API
 * Backend API for Car Rental Application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Car,
  HTTPValidationError,
} from '../models/index';
import {
    CarFromJSON,
    CarToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetCarApiV1CarsCarIdGetRequest {
    carId: number;
    currencyCode?: GetCarApiV1CarsCarIdGetCurrencyCodeEnum;
}

export interface GetCarsApiV1CarsGetRequest {
    currencyCode?: GetCarsApiV1CarsGetCurrencyCodeEnum;
}

/**
 * 
 */
export class CarsApi extends runtime.BaseAPI {

    /**
     * Get Car
     */
    async getCarApiV1CarsCarIdGetRaw(requestParameters: GetCarApiV1CarsCarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Car>> {
        if (requestParameters['carId'] == null) {
            throw new runtime.RequiredError(
                'carId',
                'Required parameter "carId" was null or undefined when calling getCarApiV1CarsCarIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['currencyCode'] != null) {
            queryParameters['currency_code'] = requestParameters['currencyCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/cars/{car_id}`.replace(`{${"car_id"}}`, encodeURIComponent(String(requestParameters['carId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarFromJSON(jsonValue));
    }

    /**
     * Get Car
     */
    async getCarApiV1CarsCarIdGet(requestParameters: GetCarApiV1CarsCarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Car> {
        const response = await this.getCarApiV1CarsCarIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Cars
     */
    async getCarsApiV1CarsGetRaw(requestParameters: GetCarsApiV1CarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Car>>> {
        const queryParameters: any = {};

        if (requestParameters['currencyCode'] != null) {
            queryParameters['currency_code'] = requestParameters['currencyCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/cars/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CarFromJSON));
    }

    /**
     * Get Cars
     */
    async getCarsApiV1CarsGet(requestParameters: GetCarsApiV1CarsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Car>> {
        const response = await this.getCarsApiV1CarsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCarApiV1CarsCarIdGetCurrencyCodeEnum = {
    Usd: 'USD',
    Jpy: 'JPY',
    Bgn: 'BGN',
    Czk: 'CZK',
    Dkk: 'DKK',
    Gbp: 'GBP',
    Huf: 'HUF',
    Pln: 'PLN',
    Ron: 'RON',
    Sek: 'SEK',
    Chf: 'CHF',
    Isk: 'ISK',
    Nok: 'NOK',
    Try: 'TRY',
    Aud: 'AUD',
    Brl: 'BRL',
    Cad: 'CAD',
    Cny: 'CNY',
    Hkd: 'HKD',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Krw: 'KRW',
    Mxn: 'MXN',
    Myr: 'MYR',
    Nzd: 'NZD',
    Php: 'PHP',
    Sgd: 'SGD',
    Thb: 'THB',
    Zar: 'ZAR',
    Eur: 'EUR'
} as const;
export type GetCarApiV1CarsCarIdGetCurrencyCodeEnum = typeof GetCarApiV1CarsCarIdGetCurrencyCodeEnum[keyof typeof GetCarApiV1CarsCarIdGetCurrencyCodeEnum];
/**
 * @export
 */
export const GetCarsApiV1CarsGetCurrencyCodeEnum = {
    Usd: 'USD',
    Jpy: 'JPY',
    Bgn: 'BGN',
    Czk: 'CZK',
    Dkk: 'DKK',
    Gbp: 'GBP',
    Huf: 'HUF',
    Pln: 'PLN',
    Ron: 'RON',
    Sek: 'SEK',
    Chf: 'CHF',
    Isk: 'ISK',
    Nok: 'NOK',
    Try: 'TRY',
    Aud: 'AUD',
    Brl: 'BRL',
    Cad: 'CAD',
    Cny: 'CNY',
    Hkd: 'HKD',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Krw: 'KRW',
    Mxn: 'MXN',
    Myr: 'MYR',
    Nzd: 'NZD',
    Php: 'PHP',
    Sgd: 'SGD',
    Thb: 'THB',
    Zar: 'ZAR',
    Eur: 'EUR'
} as const;
export type GetCarsApiV1CarsGetCurrencyCodeEnum = typeof GetCarsApiV1CarsGetCurrencyCodeEnum[keyof typeof GetCarsApiV1CarsGetCurrencyCodeEnum];
