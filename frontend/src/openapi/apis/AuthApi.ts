/* tslint:disable */
/* eslint-disable */
/**
 * Car Rental API
 * Backend API for Car Rental Application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UserRegister,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UserRegisterFromJSON,
    UserRegisterToJSON,
} from '../models/index';

export interface RegisterCognitoUserApiV1AuthRegisterCognitoUserPostRequest {
    userRegister: UserRegister;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Protected endpoint that requires authentication
     * @summary Protected Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    protectedEndpointApiV1AuthProtectedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Protected endpoint that requires authentication
     * Protected Endpoint
     */
    protectedEndpointApiV1AuthProtectedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Public endpoint that doesn\'t require authentication
     * @summary Public Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    publicEndpointApiV1AuthPublicGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Public endpoint that doesn\'t require authentication
     * Public Endpoint
     */
    publicEndpointApiV1AuthPublicGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Create a user record after successful Cognito registration. This endpoint is called by the frontend after a successful Cognito signup.
     * @summary Register Cognito User
     * @param {UserRegister} userRegister 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    registerCognitoUserApiV1AuthRegisterCognitoUserPostRaw(requestParameters: RegisterCognitoUserApiV1AuthRegisterCognitoUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Create a user record after successful Cognito registration. This endpoint is called by the frontend after a successful Cognito signup.
     * Register Cognito User
     */
    registerCognitoUserApiV1AuthRegisterCognitoUserPost(requestParameters: RegisterCognitoUserApiV1AuthRegisterCognitoUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Protected endpoint that requires authentication
     * Protected Endpoint
     */
    async protectedEndpointApiV1AuthProtectedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/protected`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Protected endpoint that requires authentication
     * Protected Endpoint
     */
    async protectedEndpointApiV1AuthProtectedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.protectedEndpointApiV1AuthProtectedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Public endpoint that doesn\'t require authentication
     * Public Endpoint
     */
    async publicEndpointApiV1AuthPublicGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/public`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Public endpoint that doesn\'t require authentication
     * Public Endpoint
     */
    async publicEndpointApiV1AuthPublicGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.publicEndpointApiV1AuthPublicGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a user record after successful Cognito registration. This endpoint is called by the frontend after a successful Cognito signup.
     * Register Cognito User
     */
    async registerCognitoUserApiV1AuthRegisterCognitoUserPostRaw(requestParameters: RegisterCognitoUserApiV1AuthRegisterCognitoUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userRegister'] == null) {
            throw new runtime.RequiredError(
                'userRegister',
                'Required parameter "userRegister" was null or undefined when calling registerCognitoUserApiV1AuthRegisterCognitoUserPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/register-cognito-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegisterToJSON(requestParameters['userRegister']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a user record after successful Cognito registration. This endpoint is called by the frontend after a successful Cognito signup.
     * Register Cognito User
     */
    async registerCognitoUserApiV1AuthRegisterCognitoUserPost(requestParameters: RegisterCognitoUserApiV1AuthRegisterCognitoUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.registerCognitoUserApiV1AuthRegisterCognitoUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
