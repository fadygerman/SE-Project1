/* tslint:disable */
/* eslint-disable */
/**
 * Car Rental API
 * Backend API for Car Rental Application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Booking,
  BookingCreate,
  BookingUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    BookingFromJSON,
    BookingToJSON,
    BookingCreateFromJSON,
    BookingCreateToJSON,
    BookingUpdateFromJSON,
    BookingUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateBookingApiV1BookingsPostRequest {
    bookingCreate: BookingCreate;
}

export interface GetBookingApiV1BookingsBookingIdGetRequest {
    bookingId: number;
}

export interface UpdateBookingApiV1BookingsBookingIdPutRequest {
    bookingId: number;
    bookingUpdate: BookingUpdate;
}

/**
 * 
 */
export class BookingsApi extends runtime.BaseAPI {

    /**
     * Create Booking
     */
    async createBookingApiV1BookingsPostRaw(requestParameters: CreateBookingApiV1BookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['bookingCreate'] == null) {
            throw new runtime.RequiredError(
                'bookingCreate',
                'Required parameter "bookingCreate" was null or undefined when calling createBookingApiV1BookingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/bookings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookingCreateToJSON(requestParameters['bookingCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Create Booking
     */
    async createBookingApiV1BookingsPost(requestParameters: CreateBookingApiV1BookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.createBookingApiV1BookingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Booking
     */
    async getBookingApiV1BookingsBookingIdGetRaw(requestParameters: GetBookingApiV1BookingsBookingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['bookingId'] == null) {
            throw new runtime.RequiredError(
                'bookingId',
                'Required parameter "bookingId" was null or undefined when calling getBookingApiV1BookingsBookingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/bookings/{booking_id}`.replace(`{${"booking_id"}}`, encodeURIComponent(String(requestParameters['bookingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Get Booking
     */
    async getBookingApiV1BookingsBookingIdGet(requestParameters: GetBookingApiV1BookingsBookingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.getBookingApiV1BookingsBookingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookings
     */
    async getBookingsApiV1BookingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Booking>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/bookings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingFromJSON));
    }

    /**
     * Get Bookings
     */
    async getBookingsApiV1BookingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Booking>> {
        const response = await this.getBookingsApiV1BookingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Booking
     */
    async updateBookingApiV1BookingsBookingIdPutRaw(requestParameters: UpdateBookingApiV1BookingsBookingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['bookingId'] == null) {
            throw new runtime.RequiredError(
                'bookingId',
                'Required parameter "bookingId" was null or undefined when calling updateBookingApiV1BookingsBookingIdPut().'
            );
        }

        if (requestParameters['bookingUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookingUpdate',
                'Required parameter "bookingUpdate" was null or undefined when calling updateBookingApiV1BookingsBookingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/bookings/{booking_id}`.replace(`{${"booking_id"}}`, encodeURIComponent(String(requestParameters['bookingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookingUpdateToJSON(requestParameters['bookingUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Update Booking
     */
    async updateBookingApiV1BookingsBookingIdPut(requestParameters: UpdateBookingApiV1BookingsBookingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.updateBookingApiV1BookingsBookingIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
